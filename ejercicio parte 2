// segunda parte del examen 

//parcial examen final pt2 //Ordenamiento

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// bubble, quick, insertion

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(&arr[j], &arr[j + 1]);
            }
        }
    }
}

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

//times

int main() {
    srand(time(NULL));

    int n = 10000;
    int arr[n];

    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000;
    }

    printf("Bubble Sort:\n");
    clock_t start, end;
    double cpu_time_used;

    for (int i = 0; i < 100; i++) {
        int tempArr[n];
        for (int j = 0; j < n; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        bubbleSort(tempArr, n);
        end = clock();

        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC * 1000;
        printf("Accion %d: %f ms\n", i + 1, cpu_time_used);
    }

    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000;
    }

    printf("\nInsertion Sort:\n");

    for (int i = 0; i < 100; i++) {
        int tempArr[n];
        for (int j = 0; j < n; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        insertionSort(tempArr, n);
        end = clock();

        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC * 1000;
        printf("Accion %d: %f ms\n", i + 1, cpu_time_used);
    }

    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000;
    }

    printf("\nQuick Sort:\n");

    for (int i = 0; i < 100; i++) {
        int tempArr[n];
        for (int j = 0; j < n; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        quickSort(tempArr, 0, n - 1);
        end = clock();

        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC * 1000;
        printf("Accion %d: %f ms\n", i + 1, cpu_time_used);
        
    }

//Total,minimo,Maximo

// Bubble 

	printf("\n\n");
    printf("Bubble Sort:\n");
    double bubbleTiempoTotal = 0.0;
    double bubbleTiempoMinimo = __DBL_MAX__;
    double bubbleTiempoMaximo = 0.0;

    for (int i = 0; i < 100; i++) {
        int tempArr[n];
        for (int j = 0; j < n; j++) {
            tempArr[j] = arr[j];
        }

        clock_t start = clock();
        bubbleSort(tempArr, n);
        clock_t end = clock();

        double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC * 1000;
        bubbleTiempoTotal += cpu_time_used;
        if (cpu_time_used < bubbleTiempoMinimo) {
            bubbleTiempoMinimo = cpu_time_used;
        }
        if (cpu_time_used > bubbleTiempoMaximo) {
            bubbleTiempoMaximo = cpu_time_used;
        }
    }

    printf("Promedio: %f ms\n", bubbleTiempoTotal / 100);
    printf("Tiempo minimo: %f ms\n", bubbleTiempoMinimo);
    printf("Tiempo maximo: %f ms\n", bubbleTiempoMaximo);

//Insertion 
    printf("\nInsertion Sort:\n");
    double insertionTiempoTotal = 0.0;
    double insertionTiempoMinimo = __DBL_MAX__;
    double insertionTiempoMaximo = 0.0;

    for (int i = 0; i < 100; i++) {
        int tempArr[n];
        for (int j = 0; j < n; j++) {
            tempArr[j] = arr[j];
        }

        clock_t start = clock();
        insertionSort(tempArr, n);
        clock_t end = clock();

        double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC * 1000;
        insertionTiempoTotal += cpu_time_used;
        if (cpu_time_used < insertionTiempoMinimo) {
            insertionTiempoMinimo = cpu_time_used;
        }
        if (cpu_time_used > insertionTiempoMaximo) {
            insertionTiempoMaximo = cpu_time_used;
        }
    }

    printf("Promedio: %f ms\n", insertionTiempoTotal / 100);
    printf("Tiempo minimo: %f ms\n", insertionTiempoMinimo);
    printf("Tiempo maximo: %f ms\n", insertionTiempoMaximo);

// Quick 
    printf("\nQuick Sort:\n");
    double quickTiempoTotal = 0.0;
    double quickTiempoMinimo = __DBL_MAX__;
    double quickTiempoMaximo = 0.0;

    for (int i = 0; i < 100; i++) {
        int tempArr[n];
        for (int j = 0; j < n; j++) {
            tempArr[j] = arr[j];
        }

        clock_t start = clock();
        quickSort(tempArr, 0, n - 1);
        clock_t end = clock();

        double cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC * 1000;
        quickTiempoTotal += cpu_time_used;
        if (cpu_time_used < quickTiempoMinimo) {
            quickTiempoMinimo = cpu_time_used;
        }
        if (cpu_time_used > quickTiempoMaximo) {
            quickTiempoMaximo = cpu_time_used;
        }
    }

    printf("Promedio: %f ms\n", quickTiempoTotal / 100);
    printf("Tiempo minimo: %f ms\n", quickTiempoMinimo);
    printf("Tiempo maximo: %f ms\n", quickTiempoMaximo);

    return 0;
}
